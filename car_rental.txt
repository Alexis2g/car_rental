-- Clear Database 
DROP TABLE IF EXISTS T_CLIENT_GENERAL;
DROP TABLE IF EXISTS T_CLIENT_CONTACT;
DROP TABLE IF EXISTS T_CLIENT_ADDRESS;
DROP TABLE IF EXISTS T_CLIENT_COUNTRY;
DROP TABLE IF EXISTS T_CLIENT_CITY;

DROP TABLE IF EXISTS T_VEHICLE_GENERAL;
DROP TABLE IF EXISTS T_VEHICLE_TYPE;
DROP TABLE IF EXISTS T_VEHICLE_COMFORT;
DROP TABLE IF EXISTS T_VEHICLE_PERFORMANCE;
DROP TABLE IF EXISTS T_VEHICLE_ASPIRATION;

DROP TABLE IF EXISTS T_RESERVATION_GENERAL;
DROP TABLE IF EXISTS T_RESERVATION_CHECKOUT;
DROP TABLE IF EXISTS T_RESERVATION_PRICING;

-- Create the Client side tables
CREATE TABLE T_CLIENT_GENERAL (
    clt_general_id INTEGER,
    clt_general_first_name VARCHAR(60),
    clt_general_last_name VARCHAR(100),
    clt_general_year_birth INTEGER,
    PRIMARY KEY (clt_general_id)
);

CREATE TABLE T_CLIENT_CONTACT (
    clt_contact_id INTEGER,
    clt_contact_mail VARCHAR(200),
    clt_contact_phone INT(10),
    PRIMARY KEY (clt_contact_id),
    FOREIGN KEY (clt_contact_id) REFERENCES T_CLIENT_GENERAL (clt_general_id)
);

CREATE TABLE T_CLIENT_ADDRESS (
    clt_address_id INTEGER,
    clt_city_id INTEGER,
    PRIMARY KEY (clt_address_id),
    FOREIGN KEY (clt_address_id) REFERENCES T_CLIENT_GENERAL (clt_general_id)
);

CREATE TABLE T_CLIENT_CITY (
    clt_city_id INTEGER,
    clt_city_name VARCHAR(80),
    clt_country_id INTEGER,
    PRIMARY KEY (clt_city_id),
    FOREIGN KEY (clt_city_id) REFERENCES T_CLIENT_ADDRESS (clt_city_id)    
);

CREATE TABLE T_CLIENT_COUNTRY (
    clt_country_id INTEGER,
    clt_country_name VARCHAR(80),
    PRIMARY KEY (clt_country_id),
    FOREIGN KEY (clt_country_id) REFERENCES T_CLIENT_CITY (clt_country_id)
);

-- Insert the client side data
INSERT INTO T_CLIENT_GENERAL (
    clt_general_first_name, clt_general_last_name, clt_general_year_birth)
VALUES 
    ("Susan", "WILSON", 1960), 
    ("Margaret", "MOORE", 1970), 
    ("Lisa", "ANDERSON", 1980),
    ("Husna", "ALVAREZ", 1992),
    ("Igor", "GOODWIN", 1967),
    ("Jimmy", "BUSBY", 1985),
    ("Nico", "MACK", 1961),
    ("Eloise", "MOSLEY", 1982),
    ("Neha", "WEBB", 1966),
    ("Eliana", "PARKINSON", 2000),
    ("Ellie", "KNOXX", 1996),
    ("Lucy", "DALE", 1966),
    ("Gary", "SNIDER", 1999),
    ("Teri", "WELSCH", 1974),
    ("Victor", "LORD", 1997),
    ("Lizzie", "RUSSEL", 1992),
    ("Apolline", "LUCAS", 2004),
    ("Rémi", "GOSSELIN", 2005),
    ("Adèle", "SALMON", 1969),
    ("Jordan", "SAVERE", 1978)
;

INSERT INTO T_CLIENT_CONTACT (
    clt_contact_mail, clt_contact_phone)
VALUES 
    ("SUSAN.WILSON@sakilacustomer.org", 0689647521), 
    ("MARGARET.MOORE@sakilacustomer.org", 0685246697), 
    ("lisa.ANDERSON@sakilacustomer.org", 0741426587),
    ("husalv@gmail.org", 0788665428),
    ("igorgood@gmail.net", 0798659428),
    ("jimmmy@hotmail.com", 0732545518),
    ("mack.nico@hotmail.com", 0628936814),
    ("mosley.e@hotmail.com", 0747186251),
    ("nehawebb@hotmail.net", 0739345117),
    ("elianap@hotmail.net", 0636658249),
    ("eknoxx@yahoo.com", 0723524998),
    ("lucydale@hotmail.net", 0663595614),
    ("garys@hotmail.net", 0741563879),
    ("welteri@hotmail.net", 0748752371),
    ("lordvic@hotmail.net", 0635978414),
    ("lizrus@yahoo.com", 0613968347),
    ("lucasa@yahoo.com", 0636912189),
    ("remigoss@yahoo.com", 0686564120),
    ("salmonadele@yahoo.com", 0620486190),
    ("jordansav@yahoo.net", 0632409704)
;

INSERT INTO T_CLIENT_ADDRESS (
    clt_city_id)
VALUES 
    (1), (2), (3), (10), (9), (7), (10), (3), (5), (4),
    (2), (8), (7), (8), (7), (2), (1), (4), (9), (6)
;

INSERT INTO T_CLIENT_CITY (
    clt_city_name, clt_country_id)
VALUES
    ("Chicago", 1), ("Miami", 1),
    ("Lyon", 2 ), ("Marseille", 2),
    ("Rome", 3), ("Bari", 3),
    ("London", 4), ("Manchester", 4),
    ("Berlin", 5), ("Stuttgart", 5),
    ("Madrid", 6), ("Barcelona", 6)
;

INSERT INTO T_CLIENT_COUNTRY (
    clt_country_name)
VALUES
    ("USA"), ("FRANCE"),
    ("ITALY"), ("UNITED KINGDOM"),
    ("GERMANY"), ("SPAIN")
;

-- Create the Vehicule Tables
CREATE TABLE T_VEHICLE_GENERAL (
    veh_general_id INTEGER,
    veh_general_model VARCHAR(50),
    veh_general_brand VARCHAR(60),
    veh_general_year INTEGER,
    veh_general_type_id INTEGER,
    veh_general_precise_model VARCHAR(150),
    PRIMARY KEY (veh_general_id)    
);

CREATE TABLE T_VEHICLE_TYPE (
    veh_type_id INTEGER,
    veh_type_name VARCHAR(50),
    PRIMARY KEY (veh_type_id),
    FOREIGN KEY (veh_type_id) REFERENCES T_VEHICLE_GENERAL (veh_general_type_id)     
);

CREATE TABLE T_VEHICLE_COMFORT (
    veh_comfort_id INTEGER,
    veh_comfort_doors INTEGER,
    veh_comfort_seats INTEGER,
    PRIMARY KEY (veh_comfort_id),
    FOREIGN KEY (veh_comfort_id) REFERENCES T_VEHICLE_GENERAL (veh_general_id)     
);

CREATE TABLE T_VEHICLE_PERFORMANCE (
    veh_performance_id INTEGER,
    veh_performance_horsepower INTEGER,
    veh_performance_weight INTEGER,
    veh_aspiration_id INTEGER,
    PRIMARY KEY (veh_performance_id),
    FOREIGN KEY (veh_performance_id) REFERENCES T_VEHICLE_GENERAL (veh_general_id)     
);

CREATE TABLE T_VEHICLE_ASPIRATION (
    veh_aspiration_id INTEGER,
    veh_aspiration_type VARCHAR(50),
    PRIMARY KEY (veh_aspiration_id),
    FOREIGN KEY (veh_aspiration_id) REFERENCES T_VEHICLE_PERFORMANCE (veh_aspiration_id)     
);

-- Insert data in the vehicle tables
INSERT INTO T_VEHICLE_GENERAL (
    veh_general_model, veh_general_brand, 
    veh_general_year, veh_general_type_id, 
    veh_general_precise_model)
VALUES 
    ("911", "Porsche", 2020, 2, "911 GT2 RS MR"),
    ("488", "FERRARI", 2018, 2, "488 Pista"),
    ("Viper", "Dodge", 2017, 2, "Viper ACR"),
    ("Mégane", "Renault", 2017, 1, "Mégane III RS"),
    ("A4", "Audi", 2016, 3, "A4 Quattro"),
    ("Leaf", "Nissan", 2017, 1, "Leaf 2nd Gen"),
    ("Yaris", "Toyota", 2020, 1, "Yaris 4 Hybrid"),
    ("i8", "BMW", 2018, 4, "i8 Roadster"),
    ("XC40", "Volvo", 2018, 5, "XC40"),
    ("GT", "Ford", 2017, 2, "GT II")
;

INSERT INTO T_VEHICLE_TYPE (
    veh_type_name)
VALUES 
    ("Hatchback"),
    ("Coupé"),
    ("Saloon"),
    ("Convertible"),
    ("SUV")
;

INSERT INTO T_VEHICLE_COMFORT (
    veh_comfort_doors,
    veh_comfort_seats)
VALUES 
    (2, 2),
    (2, 2),
    (2, 2),
    (2, 4),
    (4, 5),
    (4, 5),
    (4, 4),
    (2, 2),
    (4, 5),
    (2, 2)
;

INSERT INTO T_VEHICLE_PERFORMANCE (
    veh_performance_horsepower,
    veh_performance_weight,
    veh_aspiration_id)
VALUES 
    (750, 1470, 3),
    (710, 1500, 3),
    (645, 1530, 1),
    (296, 1430, 2),
    (187, 1680, 1),
    (215, 1600, 5),
    (116, 1085, 6),
    (374, 1665, 7),
    (247, 1680, 2),
    (656, 1385, 3)
;

INSERT INTO T_VEHICLE_ASPIRATION (
    veh_aspiration_type)
VALUES 
    ("Naturally Aspirated"),
    ("Turbo"),
    ("TwinTurbo"),
    ("Supercharger"),
    ("Electric"),
    ("Hybrid"),
    ("Hybrid Turbo")
;

-- Create the Reservation tables 
CREATE TABLE T_RESERVATION_GENERAL (
    rsv_general_id INTEGER,
    rsv_client_general_id INTEGER, 
    rsv_vehicle_general_id INTEGER,
    rsv_general_date_on DATETIME,
    rsv_general_duration INTEGER,
    rsv_general_estimate_off DATETIME,
    rsv_general_date_off_id INTEGER,
    rsv_general_price_id INTEGER,
    PRIMARY KEY (rsv_general_id),
    FOREIGN KEY (rsv_client_general_id) REFERENCES T_CLIENT_GENERAL (client_general_id),
    FOREIGN KEY (rsv_vehicle_general_id) REFERENCES T_VEHICLE_GENERAL (vehicle_general_id)
);

CREATE TABLE T_RESERVATION_CHECKOUT (
    rsv_checkout_id INTEGER,
    rsv_checkout_date_off DATETIME,
    rsv_checkout_extra_days INTEGER,
    PRIMARY KEY (rsv_checkout_id),
    FOREIGN KEY (rsv_checkout_id) REFERENCES T_VEHICLE_GENERAL (rsv_general_id)
);

CREATE TABLE T_RESERVATION_PRICING (
    rsv_pricing_id INTEGER,
    rsv_ordinary_pricing DECIMAL,
    rsv_extra_pricing DECIMAL,
    PRIMARY KEY (rsv_pricing_id),
    FOREIGN KEY (rsv_pricing_id) REFERENCES T_VEHICLE_GENERAL (rsv_general_id)
);

-- Insert data in the reservation tables

INSERT INTO T_RESERVATION_GENERAL (
    rsv_client_general_id, 
    rsv_vehicle_general_id,
    rsv_general_date_on,
    rsv_general_duration,
    rsv_general_estimate_off,
    rsv_general_date_off_id,
    rsv_general_price_id)
VALUES
    (1, 1, "2022-08-01", 5, "2022-08-05", 1, 1),
    (17, 8, "2022-07-15", 11, "2022-07-25", 2, 2),
    (3, 6, "2022-07-17", 16, "2022-07-31", 3, 3),
    (2, 2, "2022-07-06", 22, "2022-07-27", 4, 4),
    (11, 3, "2022-07-04", 36, "2022-08-08", 5, 5),
    (8, 2, "2022-08-03", 5, "2022-08-07", 6, 6),
    (19, 4, "2022-07-11", 9, "2022-07-19", 7, 7),
    (9, 9, "2022-07-15", 16, "2022-07-30", 8, 8),
    (13, 1, "2022-08-07", 12, "2022-08-18", 9, 9),
    (3, 4, "2022-07-28", 16, "2022-08-12", 10, 10),
    (20, 5, "2022-07-16", 19, "2022-08-03", 11, 11),
    (11, 8, "2022-07-26", 19, "2022-08-13", 12, 12),
    (13, 2, "2022-08-09", 9, "2022-08-17", 13, 13),
    (12, 7, "2022-07-13", 25, "2022-08-06", 14, 14),
    (2, 9, "2022-08-15", 11, "2022-08-25", 15, 15),
    (20, 1, "2022-08-19", 7, "2022-08-25", 16, 16),
    (17, 4, "2022-08-17", 6, "2022-08-22", 17, 17),
    (4, 2, "2022-08-18", 12, "2022-08-29", 18, 18),
    (19, 7, "2022-08-09", 13, "2022-08-21", 19, 19),
    (2, 6, "2022-08-05", 21, "2022-08-25", 20, 20),
    (15, 5, "2022-08-09", 11, "2022-08-19", 21, 21)
;

INSERT INTO T_RESERVATION_CHECKOUT (
    rsv_checkout_date_off, 
    rsv_checkout_extra_days)
VALUES
    ("2022-08-06", 1),
    ("2022-07-25", 0),
    ("2022-07-30", -1),
    ("2022-07-27", 0),
    ("2022-08-09", 1),
    ("2022-08-07", 0),
    ("2022-07-22", 3),
    ("2022-07-30", 0),
    ("2022-08-17", -1),
    ("2022-08-13", 1),
    ("2022-08-03", 0),
    ("2022-08-19", 6),
    ("2022-08-17", 0),
    ("2022-08-06", 0),
    ("2022-08-24", -1),
    ("2022-08-27", 2),
    ("2022-08-22", 0),
    ("2022-08-30", 1),
    ("2022-08-21", 0),
    ("2022-08-25", 0),
    ("2022-08-19", 0)
;

INSERT INTO T_RESERVATION_PRICING (
    rsv_ordinary_pricing, rsv_extra_pricing)
VALUES 
    (1000, 300), (2000, 0),
    (600, -20), (5500, 0),
    (7500, 400), (1650, 0),
    (890, 150), (1700, 0),
    (4200, 200), (2300, 150),
    (2100, 0), (5300, 1100),
    (2800, 0), (1290, 0),
    (850, -40), (1850, 650),
    (790, 0), (3650, 250),
    (1070, 0), (1020, 0),
    (1340, 0)
;

/*
-- Test the tables content if needed
SELECT * FROM T_CLIENT_GENERAL;
SELECT * FROM T_CLIENT_CONTACT;
SELECT * FROM T_CLIENT_ADDRESS;
SELECT * FROM T_CLIENT_COUNTRY;
SELECT * FROM T_CLIENT_CITY;

SELECT * FROM T_VEHICLE_GENERAL;
SELECT * FROM T_VEHICLE_TYPE;
SELECT * FROM T_VEHICLE_COMFORT;
SELECT * FROM T_VEHICLE_PERFORMANCE;
SELECT * FROM T_VEHICLE_ASPIRATION;

SELECT * FROM T_RESERVATION_GENERAL;
SELECT * FROM T_RESERVATION_CHECKOUT;
SELECT * FROM T_RESERVATION_PRICING;
*/
/*
-- A "select" query joining all the "client" tables
SELECT clt_general_id,
clt_general_first_name AS Prénom, clt_general_last_name AS Nom_Famille,
    clt_contact_phone AS Tel,
    clt_contact_mail AS Mail, clt_city_name AS Ville,
    clt_country_name AS Pays
FROM T_CLIENT_GENERAL AS CG
JOIN T_CLIENT_CONTACT AS CC ON CG.clt_general_id = CC.clt_contact_id
JOIN T_CLIENT_ADDRESS AS CA ON CG.clt_general_id = CA.clt_address_id
JOIN T_CLIENT_CITY AS CCITY ON CA.clt_city_id = CCITY.clt_city_id
JOIN T_CLIENT_COUNTRY AS CCOUNTRY ON CCITY.clt_country_id = CCOUNTRY.clt_country_id
;

-- A "select" query joining all the "Vehicles" tables
SELECT veh_general_precise_model AS Model,
        veh_general_brand AS Brand,
        veh_type_name AS Bodytype,
        veh_comfort_seats AS "Number of Seats",
        veh_performance_horsepower AS "Horse Power",
        veh_aspiration_type AS "Engine Type"
FROM T_VEHICLE_GENERAL AS VG
JOIN T_VEHICLE_TYPE AS VT ON VT.veh_type_id = VG.veh_general_type_id
JOIN T_VEHICLE_COMFORT AS VC ON VC.veh_comfort_id = VG.veh_general_id
JOIN T_VEHICLE_PERFORMANCE AS VP ON VP.veh_performance_id = VG.veh_general_id
JOIN T_VEHICLE_ASPIRATION AS VA ON VA.veh_aspiration_id = VP.veh_aspiration_id
;

-- A "select" query joining "clients", "vehicules", and "Reservation" tables
SELECT clt_general_first_name AS "Client First Name",
        clt_general_last_name AS "Client Last Name",
        veh_general_precise_model AS "Vehicle Model",
        rsv_general_date_on AS "Rental Start Date",
        rsv_general_duration AS "Loc Duration", 
        rsv_general_estimate_off AS "Scheduled Rental End", 
        rsv_checkout_date_off AS "Real Restitution Date",
        rsv_checkout_extra_days AS "Extra Days", 
        (rsv_ordinary_pricing + rsv_extra_pricing) AS "Total Price"
FROM T_RESERVATION_GENERAL AS RG
JOIN T_RESERVATION_CHECKOUT AS RC ON RC.rsv_checkout_id = RG.rsv_general_id
JOIN T_RESERVATION_PRICING AS RP ON RP.rsv_pricing_id = RG.rsv_general_id
JOIN T_CLIENT_GENERAL AS CG ON CG.clt_general_id = RG.rsv_client_general_id
JOIN T_VEHICLE_GENERAL AS VG ON VG.veh_general_id = RG.rsv_vehicle_general_id
;
*/
/*
-- EXERCICE : Which hatchback has been the most rented (in days), while the reservation started in July ? 
-- step 1 : SELECT number of days the hatchbacks reservation lasted over july and august
SELECT veh_general_model AS "Car Model", CAST ((
    (JulianDay(rsv_checkout_date_off) - JulianDay(rsv_general_date_on))+1
) As Integer) AS "Number of days rented hatchbacks in July"
FROM T_RESERVATION_GENERAL AS RG
JOIN T_RESERVATION_CHECKOUT AS RC ON RC.rsv_checkout_id = RG.rsv_general_date_off_id
JOIN T_VEHICLE_GENERAL AS VG ON RG.rsv_vehicle_general_id = VG.veh_general_id
JOIN T_VEHICLE_TYPE AS VT ON VT.veh_type_id = VG.veh_general_type_id
    WHERE veh_type_name = "Hatchback" 
;

-- test step :  
-- SELECT number of days the hatchbacks have been rented, before august, by clients having a particular phone number
Select veh_general_model AS "Car Model", Cast ((
    (JulianDay(rsv_checkout_date_off) - JulianDay(rsv_general_date_on))+1
) As Integer) AS "Number of days rented"
FROM T_RESERVATION_GENERAL AS RG
JOIN T_RESERVATION_CHECKOUT AS RC ON RC.rsv_checkout_id = RG.rsv_general_date_off_id
JOIN T_VEHICLE_GENERAL AS VG ON RG.rsv_vehicle_general_id = VG.veh_general_id
JOIN T_VEHICLE_TYPE AS VT ON VT.veh_type_id = VG.veh_general_type_id
JOIN T_CLIENT_GENERAL AS CG ON CG.clt_general_id = RG.rsv_client_general_id
JOIN T_CLIENT_CONTACT AS CCONTACT ON CCONTACT.clt_contact_id = CG.clt_general_id
    WHERE veh_type_name = "Hatchback" 
        AND rsv_general_date_on < "2022-08-01"
        AND CAST(clt_contact_phone AS TEXT) LIKE "7________"
;

-- test step :
-- SELECT total days rented for each hatchbacks during July and August 22 (with UNIONS)
SELECT veh_general_model AS "Car Model",  
        SUM(CAST(((JulianDay(rsv_checkout_date_off) - JulianDay(rsv_general_date_on))+1) 
            AS INTEGER)) AS "Number of days hatchbacks rented in july and august (unions)"
FROM T_RESERVATION_GENERAL AS RG
JOIN T_RESERVATION_CHECKOUT AS RC ON RC.rsv_checkout_id = RG.rsv_general_date_off_id
JOIN T_VEHICLE_GENERAL AS VG ON RG.rsv_vehicle_general_id = VG.veh_general_id
JOIN T_VEHICLE_TYPE AS VT ON VT.veh_type_id = VG.veh_general_type_id
JOIN T_CLIENT_GENERAL AS CG ON CG.clt_general_id = RG.rsv_client_general_id
JOIN T_CLIENT_CONTACT AS CCONTACT ON CCONTACT.clt_contact_id = CG.clt_general_id
    WHERE veh_type_name = "Hatchback" 
        AND veh_general_model LIKE "mégane"
UNION
SELECT veh_general_model AS "Car Model",  
        SUM(CAST(((JulianDay(rsv_checkout_date_off) - JulianDay(rsv_general_date_on))+1) 
            AS INTEGER))
FROM T_RESERVATION_GENERAL AS RG
JOIN T_RESERVATION_CHECKOUT AS RC ON RC.rsv_checkout_id = RG.rsv_general_date_off_id
JOIN T_VEHICLE_GENERAL AS VG ON RG.rsv_vehicle_general_id = VG.veh_general_id
JOIN T_VEHICLE_TYPE AS VT ON VT.veh_type_id = VG.veh_general_type_id
JOIN T_CLIENT_GENERAL AS CG ON CG.clt_general_id = RG.rsv_client_general_id
JOIN T_CLIENT_CONTACT AS CCONTACT ON CCONTACT.clt_contact_id = CG.clt_general_id
    WHERE veh_type_name = "Hatchback" 
        AND veh_general_model LIKE "yaris"
UNION
SELECT veh_general_model AS "Car Model",  
        SUM(CAST(((JulianDay(rsv_checkout_date_off) - JulianDay(rsv_general_date_on))+1) 
            AS INTEGER))
FROM T_RESERVATION_GENERAL AS RG
JOIN T_RESERVATION_CHECKOUT AS RC ON RC.rsv_checkout_id = RG.rsv_general_date_off_id
JOIN T_VEHICLE_GENERAL AS VG ON RG.rsv_vehicle_general_id = VG.veh_general_id
JOIN T_VEHICLE_TYPE AS VT ON VT.veh_type_id = VG.veh_general_type_id
JOIN T_CLIENT_GENERAL AS CG ON CG.clt_general_id = RG.rsv_client_general_id
JOIN T_CLIENT_CONTACT AS CCONTACT ON CCONTACT.clt_contact_id = CG.clt_general_id
    WHERE veh_type_name = "Hatchback" 
        AND veh_general_model LIKE "leaf"
ORDER BY "Number of days hatchbacks rented in july and august (unions)" DESC
;

-- Same query, without unions 
SELECT veh_general_model AS "Car Model",  
        SUM(CAST(((JulianDay(rsv_checkout_date_off) - JulianDay(rsv_general_date_on))+1) 
            AS INTEGER)) AS "Number of days hatchbacks rented in july and august (OR)"
FROM T_RESERVATION_GENERAL AS RG
JOIN T_RESERVATION_CHECKOUT AS RC ON RC.rsv_checkout_id = RG.rsv_general_date_off_id
JOIN T_VEHICLE_GENERAL AS VG ON RG.rsv_vehicle_general_id = VG.veh_general_id
JOIN T_VEHICLE_TYPE AS VT ON VT.veh_type_id = VG.veh_general_type_id
JOIN T_CLIENT_GENERAL AS CG ON CG.clt_general_id = RG.rsv_client_general_id
JOIN T_CLIENT_CONTACT AS CCONTACT ON CCONTACT.clt_contact_id = CG.clt_general_id
    WHERE veh_type_name = "Hatchback" 
        AND (
            veh_general_model LIKE "mégane"
            OR
            veh_general_model LIKE "yaris"
            OR
            veh_general_model LIKE "leaf"
            )
GROUP BY veh_general_model
ORDER BY "Number of days hatchbacks rented in july and august (OR)" DESC
;
-- Lesson : WRONG = << AND (veh_general_model LIKE "mégane" OR "yaris" OR "leaf") >>
*/

-- Same query, narowing the results to reservations that started in July
-- This answers the exercise : the hatchback is the Yaris, with 38 dans rented, while reservation started in July
SELECT veh_general_model AS "Car Model",  
        SUM(CAST(((JulianDay(rsv_checkout_date_off) - JulianDay(rsv_general_date_on))+1) 
            AS INTEGER)) AS "Number of days hatchbacks rented in july Only (unions)"
FROM T_RESERVATION_GENERAL AS RG
JOIN T_RESERVATION_CHECKOUT AS RC ON RC.rsv_checkout_id = RG.rsv_general_date_off_id
JOIN T_VEHICLE_GENERAL AS VG ON RG.rsv_vehicle_general_id = VG.veh_general_id
JOIN T_VEHICLE_TYPE AS VT ON VT.veh_type_id = VG.veh_general_type_id
JOIN T_CLIENT_GENERAL AS CG ON CG.clt_general_id = RG.rsv_client_general_id
JOIN T_CLIENT_CONTACT AS CCONTACT ON CCONTACT.clt_contact_id = CG.clt_general_id
    WHERE veh_type_name = "Hatchback" 
        AND veh_general_model LIKE "mégane"
        AND rsv_general_date_on < "2022-08-01"
UNION
SELECT veh_general_model AS "Car Model",  
        SUM(CAST(((JulianDay(rsv_checkout_date_off) - JulianDay(rsv_general_date_on))+1) 
            AS INTEGER)) AS "Number of days rented in july"
FROM T_RESERVATION_GENERAL AS RG
JOIN T_RESERVATION_CHECKOUT AS RC ON RC.rsv_checkout_id = RG.rsv_general_date_off_id
JOIN T_VEHICLE_GENERAL AS VG ON RG.rsv_vehicle_general_id = VG.veh_general_id
JOIN T_VEHICLE_TYPE AS VT ON VT.veh_type_id = VG.veh_general_type_id
JOIN T_CLIENT_GENERAL AS CG ON CG.clt_general_id = RG.rsv_client_general_id
JOIN T_CLIENT_CONTACT AS CCONTACT ON CCONTACT.clt_contact_id = CG.clt_general_id
    WHERE veh_type_name = "Hatchback" 
        AND veh_general_model LIKE "yaris"
        AND rsv_general_date_on < "2022-08-01"
UNION
SELECT veh_general_model AS "Car Model",  
        SUM(CAST(((JulianDay(rsv_checkout_date_off) - JulianDay(rsv_general_date_on))+1) 
            AS INTEGER)) AS "Number of days rented in july"
FROM T_RESERVATION_GENERAL AS RG
JOIN T_RESERVATION_CHECKOUT AS RC ON RC.rsv_checkout_id = RG.rsv_general_date_off_id
JOIN T_VEHICLE_GENERAL AS VG ON RG.rsv_vehicle_general_id = VG.veh_general_id
JOIN T_VEHICLE_TYPE AS VT ON VT.veh_type_id = VG.veh_general_type_id
JOIN T_CLIENT_GENERAL AS CG ON CG.clt_general_id = RG.rsv_client_general_id
JOIN T_CLIENT_CONTACT AS CCONTACT ON CCONTACT.clt_contact_id = CG.clt_general_id
    WHERE veh_type_name = "Hatchback" 
        AND veh_general_model LIKE "leaf"
        AND rsv_general_date_on < "2022-08-01"
ORDER BY "Number of days rented in july" DESC
;

/*
-- EXERCICE : verify the phone numbers of clients renting coupés in July
-- SELECT, for each coupé, the number of days coupé rents lasted, if rent started in july, and identifying the clients by their phone number
Select 
    clt_general_last_name AS name,
    veh_general_model AS "Car Model", Cast ((
    (JulianDay(rsv_checkout_date_off) - JulianDay(rsv_general_date_on))+1
) As Integer) AS "Number of days Coupé rents lasted if started in july (not cast phone)"
FROM T_RESERVATION_GENERAL AS RG
JOIN T_RESERVATION_CHECKOUT AS RC ON RC.rsv_checkout_id = RG.rsv_general_date_off_id
JOIN T_VEHICLE_GENERAL AS VG ON RG.rsv_vehicle_general_id = VG.veh_general_id
JOIN T_VEHICLE_TYPE AS VT ON VT.veh_type_id = VG.veh_general_type_id
JOIN T_CLIENT_GENERAL AS CG ON CG.clt_general_id = RG.rsv_client_general_id
JOIN T_CLIENT_CONTACT AS CCONTACT ON CCONTACT.clt_contact_id = CG.clt_general_id
    WHERE veh_type_name = "Coupé" 
        AND rsv_general_date_on < "2022-08-01"
        AND (
            clt_contact_phone LIKE "_85______"
            OR clt_contact_phone LIKE "_23______")
;

-- same query. Casting the phone number prom INT to TEXT : 
--SELECT, for each coupé, the number of days coupé rents lasted, if rent started in july, and identifying the clients by their phone number
Select 
    clt_general_last_name AS name,
    veh_general_model AS "Car Model", Cast ((
    (JulianDay(rsv_checkout_date_off) - JulianDay(rsv_general_date_on))+1
) As Integer) AS "Number of days Coupé rents lasted if started in july (cast phone technique)"
FROM T_RESERVATION_GENERAL AS RG
JOIN T_RESERVATION_CHECKOUT AS RC ON RC.rsv_checkout_id = RG.rsv_general_date_off_id
JOIN T_VEHICLE_GENERAL AS VG ON RG.rsv_vehicle_general_id = VG.veh_general_id
JOIN T_VEHICLE_TYPE AS VT ON VT.veh_type_id = VG.veh_general_type_id
JOIN T_CLIENT_GENERAL AS CG ON CG.clt_general_id = RG.rsv_client_general_id
JOIN T_CLIENT_CONTACT AS CCONTACT ON CCONTACT.clt_contact_id = CG.clt_general_id
    WHERE veh_type_name = "Coupé" 
        AND rsv_general_date_on < "2022-08-01"
        AND 
            (CAST(clt_contact_phone AS TEXT) LIKE "_85______"
            OR CAST(clt_contact_phone AS TEXT) LIKE "_23______")
;
*/
/*
-- EXERCICE : What is the average power of cars rented by clients living in ROME ? (if a car is rented multiple times, it counts multiple times)
-- step 1 : get car power, if car has been rented
SELECT 
    veh_general_model AS Model,
    veh_performance_horsepower AS Power
FROM T_VEHICLE_GENERAL AS VG
JOIN T_RESERVATION_GENERAL AS RG ON RG.rsv_vehicle_general_id = VG.veh_general_id
JOIN T_VEHICLE_PERFORMANCE AS VP ON VP.veh_performance_id = VG.veh_general_id
    WHERE
        rsv_vehicle_general_id = veh_general_id
GROUP BY veh_general_model
;

-- step 2 : Narrow to reservations coming from clients living in Miami
SELECT 
    veh_general_model AS Model,
    veh_performance_horsepower AS Power,
    clt_general_first_name AS "First Name",
    clt_general_last_name AS "Last Name",
    clt_city_name AS City
FROM T_VEHICLE_GENERAL AS VG
JOIN T_RESERVATION_GENERAL AS RG ON RG.rsv_vehicle_general_id = VG.veh_general_id
JOIN T_CLIENT_GENERAL AS CG ON CG.clt_general_id = RG.rsv_client_general_id
JOIN T_VEHICLE_PERFORMANCE AS VP ON VP.veh_performance_id = VG.veh_general_id
JOIN T_CLIENT_ADDRESS AS CA ON CA.clt_address_id = CG.clt_general_id
JOIN T_CLIENT_CITY AS CCITY ON CCITY.clt_city_id = CA.clt_city_id
    WHERE
        clt_city_name = "Miami"
;

-- Step 3 : Find the average power of cars they rented
SELECT 
    AVG(veh_performance_horsepower) AS "Average Power of cars rented in Miami",
    clt_city_name AS City
FROM T_VEHICLE_GENERAL AS VG
JOIN T_RESERVATION_GENERAL AS RG ON RG.rsv_vehicle_general_id = VG.veh_general_id
JOIN T_CLIENT_GENERAL AS CG ON CG.clt_general_id = RG.rsv_client_general_id
JOIN T_VEHICLE_PERFORMANCE AS VP ON VP.veh_performance_id = VG.veh_general_id
JOIN T_CLIENT_ADDRESS AS CA ON CA.clt_address_id = CG.clt_general_id
JOIN T_CLIENT_CITY AS CCITY ON CCITY.clt_city_id = CA.clt_city_id
    WHERE
        clt_city_name = "Miami"
;
*/
-- One more restriction on the query : select only the cars that were rented more than 2 week
-- step 4 : select cars rented for more than 14 days (join the checkout table)
SELECT 
    AVG(veh_performance_horsepower) AS "Average Power of cars rented in Miami",
    clt_city_name AS City
FROM T_VEHICLE_GENERAL AS VG
JOIN T_RESERVATION_GENERAL AS RG ON RG.rsv_vehicle_general_id = VG.veh_general_id
JOIN T_CLIENT_GENERAL AS CG ON CG.clt_general_id = RG.rsv_client_general_id
JOIN T_VEHICLE_PERFORMANCE AS VP ON VP.veh_performance_id = VG.veh_general_id
JOIN T_CLIENT_ADDRESS AS CA ON CA.clt_address_id = CG.clt_general_id
JOIN T_CLIENT_CITY AS CCITY ON CCITY.clt_city_id = CA.clt_city_id
JOIN T_RESERVATION_CHECKOUT AS RC ON RC.rsv_checkout_id = RG.rsv_general_date_off_id
    WHERE
            clt_city_name = "Miami"
        AND
            CAST(((JulianDay(rsv_checkout_date_off) - JulianDay(rsv_general_date_on))+1) 
            AS INTEGER) > 14
;
